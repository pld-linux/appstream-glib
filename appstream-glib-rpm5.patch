--- appstream-glib-0.2.0/libappstream-builder/Makefile.am.orig	2014-06-19 10:09:35.000000000 +0200
+++ appstream-glib-0.2.0/libappstream-builder/Makefile.am	2014-06-21 22:26:16.105266525 +0200
@@ -66,6 +66,7 @@
 
 libappstream_builder_la_LIBADD =				\
 	$(AS_GLIB_LIBS)						\
+	$(LIBARCHIVE_LIBS)					\
 	$(RPM_LIBS)						\
 	$(GLIB_LIBS)
 
@@ -76,6 +77,7 @@
 	-export-symbols-regex '^asb_.*'
 
 libappstream_builder_la_CFLAGS =				\
+        $(RPM_CFLAGS)						\
 	$(WARNINGFLAGS_C)
 
 if HAVE_INTROSPECTION
@@ -107,11 +109,6 @@
 	$(AS_GLIB_LIBS)						\
 	libappstream-builder.la					\
 	archive
-if HAVE_RPM
-AppStreamBuilder_1_0_gir_LIBS +=				\
-	rpmio 							\
-	rpm
-endif
 AppStreamBuilder_1_0_gir_FILES = $(introspection_sources)
 INTROSPECTION_GIRS += AppStreamBuilder-1.0.gir
 
--- appstream-glib-0.3.0/libappstream-builder/asb-package-rpm.c.orig	2014-08-29 15:35:27.000000000 +0200
+++ appstream-glib-0.3.0/libappstream-builder/asb-package-rpm.c	2014-09-04 21:37:12.294741594 +0200
@@ -33,7 +33,7 @@
 #include <archive.h>
 #include <archive_entry.h>
 
-#include <rpm/rpmlib.h>
+#include <rpm/rpm46compat.h>
 #include <rpm/rpmts.h>
 
 #include "as-cleanup.h"
@@ -225,6 +225,36 @@ asb_package_rpm_set_source (AsbPackage *
 	asb_package_set_source_pkgname (pkg, srcrpm);
 }
 
+static uint64_t rpmtdGetNumber(rpmtd td)
+{
+    uint64_t val = 0;
+    int ix;
+    assert(td != NULL);
+    ix = (td->ix >= 0 ? td->ix : 0);
+
+    switch (td->type) {
+    case RPM_INT64_TYPE:
+	val = *((uint64_t *) td->data + ix);
+	break;
+    case RPM_INT32_TYPE:
+	val = *((uint32_t *) td->data + ix);
+	break;
+    case RPM_INT16_TYPE:
+	val = *((uint16_t *) td->data + ix);
+	break;
+    case RPM_INT8_TYPE:
+    case RPM_CHAR_TYPE:
+	val = *((uint8_t *) td->data + ix);
+	break;
+    default:
+	break;
+    }
+    return val;
+}
+
+#define _RPMVSF_NOSIGNATURES (RPMVSF_NODSAHEADER | RPMVSF_NORSAHEADER | RPMVSF_NODSA | RPMVSF_NORSA)
+#define	_RPMVSF_NODIGESTS (RPMVSF_NOSHA1HEADER | RPMVSF_NOMD5HEADER | RPMVSF_NOSHA1 | RPMVSF_NOMD5)
+
 /**
  * asb_package_rpm_ensure_nevra:
  **/
@@ -235,7 +265,7 @@ asb_package_rpm_ensure_nevra (AsbPackage
 	AsbPackageRpmPrivate *priv = GET_PRIVATE (pkg_rpm);
 	rpmtd td;
 
-	td = rpmtdNew ();
+	td = malloc (sizeof (*td));
 	headerGet (priv->h, RPMTAG_NAME, td, HEADERGET_MINMEM);
 	asb_package_set_name (pkg, rpmtdGetString (td));
 	headerGet (priv->h, RPMTAG_VERSION, td, HEADERGET_MINMEM);
@@ -246,7 +276,7 @@ asb_package_rpm_ensure_nevra (AsbPackage
 	asb_package_set_arch (pkg, rpmtdGetString (td));
 	headerGet (priv->h, RPMTAG_EPOCH, td, HEADERGET_MINMEM);
 	asb_package_set_epoch (pkg, rpmtdGetNumber (td));
-	rpmtdFree (td);
+	free (td);
 	return TRUE;
 }
 
@@ -260,10 +290,10 @@ asb_package_rpm_ensure_source (AsbPackag
 	AsbPackageRpmPrivate *priv = GET_PRIVATE (pkg_rpm);
 	rpmtd td;
 
-	td = rpmtdNew ();
+	td = malloc (sizeof (*td));
 	headerGet (priv->h, RPMTAG_SOURCERPM, td, HEADERGET_MINMEM);
 	asb_package_rpm_set_source (pkg, rpmtdGetString (td));
-	rpmtdFree (td);
+	free (td);
 	return TRUE;
 }
 
@@ -277,10 +307,10 @@ asb_package_rpm_ensure_url (AsbPackage *
 	AsbPackageRpmPrivate *priv = GET_PRIVATE (pkg_rpm);
 	rpmtd td;
 
-	td = rpmtdNew ();
+	td = malloc (sizeof (*td));
 	headerGet (priv->h, RPMTAG_URL, td, HEADERGET_MINMEM);
 	asb_package_set_url (pkg, rpmtdGetString (td));
-	rpmtdFree (td);
+	free (td);
 	return TRUE;
 }
 
@@ -294,10 +324,10 @@ asb_package_rpm_ensure_license (AsbPacka
 	AsbPackageRpmPrivate *priv = GET_PRIVATE (pkg_rpm);
 	rpmtd td;
 
-	td = rpmtdNew ();
+	td = malloc (sizeof (*td));
 	headerGet (priv->h, RPMTAG_LICENSE, td, HEADERGET_MINMEM);
 	asb_package_rpm_set_license (pkg, rpmtdGetString (td));
-	rpmtdFree (td);
+	free (td);
 	return TRUE;
 }
 
@@ -370,7 +400,7 @@ asb_package_rpm_ensure_releases (AsbPack
 
 	/* read out the file list */
 	for (i = 0; i < 3; i++)
-		td[i] = rpmtdNew ();
+		td[i] = malloc (sizeof (*td[1]));
 	/* get the ChangeLog info */
 	headerGet (priv->h, RPMTAG_CHANGELOGTIME, td[0], HEADERGET_MINMEM);
 	headerGet (priv->h, RPMTAG_CHANGELOGNAME, td[1], HEADERGET_MINMEM);
@@ -385,7 +415,7 @@ asb_package_rpm_ensure_releases (AsbPack
 	}
 	for (i = 0; i < 3; i++) {
 		rpmtdFreeData (td[i]);
-		rpmtdFree (td[i]);
+		free (td[i]);
 	}
 	return TRUE;
 }
@@ -407,7 +437,7 @@ asb_package_rpm_ensure_deps (AsbPackage
 	_cleanup_strv_free_ gchar **deps = NULL;
 
 	/* read out the dep list */
-	td = rpmtdNew ();
+	td = malloc (sizeof (*td));
 	rc = headerGet (priv->h, RPMTAG_REQUIRENAME, td, HEADERGET_MINMEM);
 	if (!rc) {
 		ret = FALSE;
@@ -435,7 +465,7 @@ asb_package_rpm_ensure_deps (AsbPackage
 	asb_package_set_deps (pkg, deps);
 out:
 	rpmtdFreeData (td);
-	rpmtdFree (td);
+	free (td);
 	return ret;
 }
 
@@ -461,7 +491,7 @@ asb_package_rpm_ensure_filelists (AsbPac
 
 	/* read out the file list */
 	for (i = 0; i < 3; i++)
-		td[i] = rpmtdNew ();
+		td[i] = malloc (sizeof (*td[i]));
 	rc = headerGet (priv->h, RPMTAG_DIRNAMES, td[0], HEADERGET_MINMEM);
 	if (rc)
 		rc = headerGet (priv->h, RPMTAG_BASENAMES, td[1], HEADERGET_MINMEM);
@@ -496,7 +526,7 @@ asb_package_rpm_ensure_filelists (AsbPac
 out:
 	for (i = 0; i < 3; i++) {
 		rpmtdFreeData (td[i]);
-		rpmtdFree (td[i]);
+		free (td[i]);
 	}
 	return ret;
 }
